import logging
import time

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from settings import API_TOKEN

# Configure logging

logging.basicConfig(level=logging.DEBUG)

# Initialize bot and dispatcher

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)



@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply(f"–ü—Ä–∏–≤–µ—Ç, —è —á–∞—Ç-–±–æ—Ç! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É")
    logging.info(f"Message from {message.from_user.username}: {message.text}, {time.asctime()}")


@dp.message_handler(text='–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã')
async def buttons(message: types.Message):
    await message.answer(f"—Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
                         f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 10-00 –¥–æ 23-00\n"
                         f"–ë–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–∞ –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö\n"
                         f"–ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å 10-00 –¥–æ 22-00")


@dp.message_handler(text='–ê–∫—Ü–∏–∏')
async def buttons(message: types.Message):
    await message.answer(f"–ü—Ä–∏ –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ –Ω–∞ —Å—É–º–º—É \n"
                         f"–æ—Ç 2000 —Ä—É–± –º—ã –¥–æ–±–∞–≤–∏–º –≤ –í–∞—à –∑–∞–∫–∞–∑\n"
                         f" –ø—Ä–∏—è—Ç–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞.")

@dp.message_handler(text='–î–æ—Å—Ç–∞–≤–∫–∞')
async def buttons(message: types.Message):
    await message.answer(f"–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å 10-00 –¥–æ\n"
                         f" 23-00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö.\n"
                         f"–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 1500 —Ä—É–±. –¥–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è\n"
                         f" –ë–ï–°–ü–õ–ê–¢–ù–û –≤ –ª—é–±—É—é —Ç–æ—á–∫—É –≥–æ—Ä–æ–¥–∞.\n"
                         f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ 30 –º–∏–Ω —Å –º–æ–º–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞")

@dp.message_handler(text='–ü–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ')
async def buttons(message: types.Message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ö–æ—à–∫–∏", callback_data="cat"),
               InlineKeyboardButton("–°–æ–±–∞–∫–∏", callback_data="dog"),
               )

    await message.answer(f"–°–µ–≥–æ–¥–Ω—è —Å–ª–∏—à–∫–æ–º —Ö–æ—Ä–æ—à–∏–π –¥–µ–Ω—å —á—Ç–æ–±—ã –≥—Ä—É—Å—Ç–∏—Ç—å!", reply_markup=markup)


@dp.callback_query_handler(text_startswith="cat")
async def fun_handler(call: types.CallbackQuery):
    with open('data/cats.jpg', 'rb') as photo:
        await call.message.reply_photo(photo, caption='–ë–µ–∑ –∫–æ—Ç–∞ –∂–∏–∑–Ω—å –Ω–µ —Ç–∞ üò∫ ')

    await call.answer()

@dp.callback_query_handler(text_startswith="dog")
async def fun_handler(call: types.CallbackQuery):
    with open('data/dogs.png','rb') as photo:
        await call.message.reply_photo(photo, caption="–°–æ–±–∞–∫–∞-—É–ª—ã–±–∞–∫–∞")

    await call.answer()

@dp.message_handler()
async def echo(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "–ê–∫—Ü–∏–∏")
    markup.add("–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã", "–î–æ—Å—Ç–∞–≤–∫–∞")


    await message.answer(message.text, reply_markup=markup)
    logging.info(f"Message from {message.from_user.username}: {message.text}")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
